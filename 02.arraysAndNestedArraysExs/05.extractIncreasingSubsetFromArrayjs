function extractIncreasingSubsetFromArray(array) {
    
    
    let max = array[0];
        let result = array.filter(currentNum => {
            if (currentNum >= max) {
                max = currentNum;
            }
            return currentNum >= max;
        });
        return(result);
        
     }

     (extractIncreasingSubsetFromArray([1, 3, 8, 4, 10, 12, 3, 2, 24]));

     extractIncreasingSubsetFromArray([1, 2, 3, 4])

     extractIncreasingSubsetFromArray([20, 3, 2, 15, 6, 1])

     extractIncreasingSubsetFromArray([-10,-6,5,15,10,22,1,-3])

    //  Write a function that extracts only those numbers that form a non-decreasing subset.
    //   In other words, you start from the first element and continue to the end
    //    of the given array of numbers. Any number which is LESS THAN the current 
    //    biggest one is ignored, alternatively if it’s equal or higher than the
    //     current biggest one you set it as the current biggest one and you continue to the next number. 
    //  The input comes as an array of numbers.
    //  The output is the processed array after the filtration, which 
    //  should be a non-decreasing subset. Return the array of numbers.
    //  •	The Array.reduce() built-in function might help you a lot with this problem.